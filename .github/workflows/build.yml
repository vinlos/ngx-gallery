# This is a basic workflow to help you get started with Actions

name: Continuous build & publication

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - "main"
      - "master"
      - "release/**"
  pull_request:
    branches:
      - "main"
      - "master"
      - "release/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checking out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'

    #   - name: Set up Chrome
    #     uses: browser-actions/setup-chrome@v1
    #     with:
    #       install-dependencies: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Prepare version
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          # Extract the base version from the branch name
          echo "GITHUB_REF=$GITHUB_REF"
          BASE_VERSION=$(echo "${GITHUB_REF#refs/heads/release/}")
          echo "BASE_VERSION=$BASE_VERSION"
          
          # Get the latest tag matching the base version
          git fetch --tags
          LATEST_TAG=$(git tag --list "v${BASE_VERSION}.*" --sort=-v:refname | head -1 || echo "v${BASE_VERSION}.0")
          
          # Increment the patch version
          PATCH_VERSION=$(echo $LATEST_TAG | awk -F. '{print $NF+1}')
          VERSION="${BASE_VERSION}.${PATCH_VERSION}"

          # Prepare the new version and create the tag
          npm version $VERSION --workspaces true --include-workspace-root true --workspaces-update false --git-tag-version false
          
          # Share version with next steps
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build library
        run: npm run build:lib

    #   - name: Build application
    #     run: npm run build

    #   - name: Test library
    #     run: npm run test:ci

    #   - name: Test application
    #     run: npm run test:lib-ci

    #   - name: Lint
    #     run: npm run lint:lib

      - name: Tag
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          git tag v$VERSION
          git push origin v$VERSION
          
      - name: Publish
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          npm run publish:lib $VERSION
